// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StringManager.API.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Create_Folder_In_DomainFeature : object, Xunit.IClassFixture<Create_Folder_In_DomainFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Create_Folder_In_Domain.feature"
#line hidden
        
        public Create_Folder_In_DomainFeature(Create_Folder_In_DomainFeature.FixtureData fixtureData, StringManager_API_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create_Folder_In_Domain", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Username"});
            table1.AddRow(new string[] {
                        "1",
                        "SuperUser"});
            table1.AddRow(new string[] {
                        "2",
                        "SalesReader"});
            table1.AddRow(new string[] {
                        "3",
                        "SalesUser"});
            table1.AddRow(new string[] {
                        "4",
                        "ProductReader"});
            table1.AddRow(new string[] {
                        "5",
                        "ProductUser"});
            table1.AddRow(new string[] {
                        "6",
                        "SuperReader"});
#line 4
        testRunner.Given("that the following users exists", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessGroupId",
                        "AccessGroup"});
            table2.AddRow(new string[] {
                        "1",
                        "sales-domain-r"});
            table2.AddRow(new string[] {
                        "2",
                        "sales-domain-crud"});
            table2.AddRow(new string[] {
                        "3",
                        "super-crud"});
            table2.AddRow(new string[] {
                        "4",
                        "super-r"});
            table2.AddRow(new string[] {
                        "5",
                        "product-domain-r"});
            table2.AddRow(new string[] {
                        "6",
                        "product-domain-crud"});
            table2.AddRow(new string[] {
                        "7",
                        "sales-users-folder-r"});
            table2.AddRow(new string[] {
                        "8",
                        "sales-users-folder-crud"});
#line 12
        testRunner.And("that the following access groups exists", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "AccessGroupId"});
            table3.AddRow(new string[] {
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "2",
                        "1"});
            table3.AddRow(new string[] {
                        "3",
                        "2"});
            table3.AddRow(new string[] {
                        "3",
                        "8"});
            table3.AddRow(new string[] {
                        "4",
                        "5"});
            table3.AddRow(new string[] {
                        "5",
                        "6"});
            table3.AddRow(new string[] {
                        "6",
                        "4"});
#line 22
        testRunner.And("that the users have the following access groups", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DomainId",
                        "DomainName"});
            table4.AddRow(new string[] {
                        "1",
                        "Sales"});
            table4.AddRow(new string[] {
                        "2",
                        "Product"});
#line 31
        testRunner.And("that the following domains exists", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DomainId",
                        "AccessGroupId",
                        "AccessRight"});
            table5.AddRow(new string[] {
                        "1",
                        "1",
                        "-R--"});
            table5.AddRow(new string[] {
                        "1",
                        "2",
                        "CRUD"});
            table5.AddRow(new string[] {
                        "1",
                        "3",
                        "CRUD"});
            table5.AddRow(new string[] {
                        "1",
                        "4",
                        "-R--"});
            table5.AddRow(new string[] {
                        "2",
                        "3",
                        "CRUD"});
            table5.AddRow(new string[] {
                        "2",
                        "4",
                        "-R--"});
            table5.AddRow(new string[] {
                        "2",
                        "5",
                        "-R--"});
            table5.AddRow(new string[] {
                        "2",
                        "6",
                        "CRUD"});
#line 35
        testRunner.And("that the following access groups can access the domains", ((string)(null)), table5, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create a new folder in one of the users available domains")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder in one of the users available domains")]
        [Xunit.InlineDataAttribute("1", "1", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", new string[0])]
        [Xunit.InlineDataAttribute("3", "1", new string[0])]
        [Xunit.InlineDataAttribute("5", "2", new string[0])]
        public virtual void CreateANewFolderInOneOfTheUsersAvailableDomains(string userid, string domainid, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("domainid", domainid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder in one of the users available domains", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 47
        testRunner.Given(string.Format("that the user \"{0}\" wants to add a new folder to the domain \"{1}\"", userid, domainid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table6.AddRow(new string[] {
                            "NewFolder",
                            "A description for this folder"});
#line 48
        testRunner.And("that the user enters the following information about the folder", ((string)(null)), table6, "And ");
#line hidden
#line 51
        testRunner.When("the user sends the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
        testRunner.Then("the new folder is created with expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
        testRunner.And("the user gets the http status code \"201 Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Description"});
                table7.AddRow(new string[] {
                            "<GUID />",
                            "NewFolder",
                            "A description for this folder"});
#line 54
        testRunner.And("the following information about the folder is returned", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create a new folder with a user that does not have create access")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder with a user that does not have create access")]
        [Xunit.InlineDataAttribute("2", "1", new string[0])]
        [Xunit.InlineDataAttribute("2", "2", new string[0])]
        [Xunit.InlineDataAttribute("3", "2", new string[0])]
        [Xunit.InlineDataAttribute("4", "2", new string[0])]
        [Xunit.InlineDataAttribute("4", "1", new string[0])]
        [Xunit.InlineDataAttribute("5", "1", new string[0])]
        [Xunit.InlineDataAttribute("6", "1", new string[0])]
        [Xunit.InlineDataAttribute("6", "2", new string[0])]
        public virtual void CreateANewFolderWithAUserThatDoesNotHaveCreateAccess(string userid, string domainid, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("domainid", domainid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder with a user that does not have create access", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 66
        testRunner.Given(string.Format("that the user \"{0}\" wants to add a new folder to the domain \"{1}\"", userid, domainid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table8.AddRow(new string[] {
                            "NewFolder",
                            "A description for this folder"});
#line 67
        testRunner.And("that the user enters the following information about the folder", ((string)(null)), table8, "And ");
#line hidden
#line 70
        testRunner.When("the user sends the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.Then("no new folder is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
        testRunner.And("the user gets the http status code \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Description"});
                table9.AddRow(new string[] {
                            "UnauthorizedUser",
                            "Unauthorized user",
                            "The user does not have the permissions to complete the action"});
#line 73
        testRunner.And("the following problem detail is returned", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new folder with a specific access group")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder with a specific access group")]
        public virtual void CreateANewFolderWithASpecificAccessGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder with a specific access group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 89
        testRunner.Given("that the user \"1\" wants to add a new folder to the domain \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table10.AddRow(new string[] {
                            "SalesUsersFolder",
                            "A description for the sales users folder"});
#line 90
        testRunner.And("that the user enters the following information about the folder", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId",
                            "AccessType"});
                table11.AddRow(new string[] {
                            "7",
                            "-R--"});
                table11.AddRow(new string[] {
                            "8",
                            "CRUD"});
#line 93
        testRunner.And("that the user adds the following access groups", ((string)(null)), table11, "And ");
#line hidden
#line 97
        testRunner.When("the user sends the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
        testRunner.Then("the new folder is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId",
                            "AccessType"});
                table12.AddRow(new string[] {
                            "7",
                            "-R--"});
                table12.AddRow(new string[] {
                            "8",
                            "CRUD"});
#line 99
        testRunner.And("the folder has the following access groups", ((string)(null)), table12, "And ");
#line hidden
#line 103
        testRunner.And("the user gets the http status code \"201 Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Description"});
                table13.AddRow(new string[] {
                            "<GUID />",
                            "SalesUsersFolder",
                            "A description for the sales users folder"});
#line 104
        testRunner.And("the following information about the folder is returned", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new folder with a specific access group that the user does not have acce" +
            "ss to")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder with a specific access group that the user does not have acce" +
            "ss to")]
        public virtual void CreateANewFolderWithASpecificAccessGroupThatTheUserDoesNotHaveAccessTo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder with a specific access group that the user does not have acce" +
                    "ss to", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 109
        testRunner.Given("that the user \"3\" wants to add a new folder to the domain \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "AccessGroup"});
                table14.AddRow(new string[] {
                            "NewFolder",
                            "A description for this folder",
                            ""});
#line 110
        testRunner.And("that the user enters the following information about the folder", ((string)(null)), table14, "And ");
#line hidden
#line 113
        testRunner.When("the user sends the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new folder with the same name as an existing folder")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder with the same name as an existing folder")]
        public virtual void CreateANewFolderWithTheSameNameAsAnExistingFolder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder with the same name as an existing folder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 116
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new folder with an invalid folder name")]
        [Xunit.TraitAttribute("FeatureTitle", "Create_Folder_In_Domain")]
        [Xunit.TraitAttribute("Description", "Create a new folder with an invalid folder name")]
        public virtual void CreateANewFolderWithAnInvalidFolderName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new folder with an invalid folder name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Create_Folder_In_DomainFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Create_Folder_In_DomainFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

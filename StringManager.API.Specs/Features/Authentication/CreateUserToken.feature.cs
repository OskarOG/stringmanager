// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StringManager.API.Specs.Features.Authentication
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthenticationUserAuthenticationFeature : object, Xunit.IClassFixture<AuthenticationUserAuthenticationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UserAuthentication.feature"
#line hidden
        
        public AuthenticationUserAuthenticationFeature(AuthenticationUserAuthenticationFeature.FixtureData fixtureData, StringManager_API_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Authentication", "Authentication/UserAuthentication", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
   #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Email",
                        "UserRole",
                        "Password"});
            table1.AddRow(new string[] {
                        "616aba5c-e933-4b22-a383-93aea94379b4",
                        "adminuser@email.com",
                        "Administrator",
                        "Password1"});
            table1.AddRow(new string[] {
                        "c0a1b5bd-d48d-44c3-bf25-0500ebbd239d",
                        "useradmin@email.com",
                        "UserAdmin",
                        "Password2"});
            table1.AddRow(new string[] {
                        "910b77cb-ee2a-4673-bc34-78c0992b0f05",
                        "folderadmin@email.com",
                        "FolderAdmin",
                        "Password3"});
            table1.AddRow(new string[] {
                        "11a8f678-b1b4-4d95-8191-0ea27f72407e",
                        "user@email.com",
                        "User",
                        "Password4"});
#line 4
      testRunner.Given("that the following users exists", ((string)(null)), table1, "Given ");
#line hidden
#line 10
      testRunner.And("that the current date and time is \"2022-08-02 12:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="User can authenticate and get a token that is valid for the expected time")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication/UserAuthentication")]
        [Xunit.TraitAttribute("Description", "User can authenticate and get a token that is valid for the expected time")]
        [Xunit.TraitAttribute("Category", "UserAuthenticationToken")]
        [Xunit.InlineDataAttribute("adminuser@email.com", "Password1", "Administrator", new string[0])]
        [Xunit.InlineDataAttribute("useradmin@email.com", "Password2", "UserAdmin", new string[0])]
        [Xunit.InlineDataAttribute("folderadmin@email.com", "Password3", "FolderAdmin", new string[0])]
        [Xunit.InlineDataAttribute("user@email.com", "Password4", "User", new string[0])]
        public void UserCanAuthenticateAndGetATokenThatIsValidForTheExpectedTime(string userEmail, string userPassword, string userRole, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UserAuthenticationToken"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userEmail", userEmail);
            argumentsOfScenario.Add("userPassword", userPassword);
            argumentsOfScenario.Add("userRole", userRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can authenticate and get a token that is valid for the expected time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
   this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table2.AddRow(new string[] {
                            string.Format("{0}", userEmail),
                            string.Format("{0}", userPassword)});
#line 14
      testRunner.Given("that the user with the following information wants to sign in", ((string)(null)), table2, "Given ");
#line hidden
#line 17
      testRunner.When("the create token request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
      testRunner.Then("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
      testRunner.And("a valid token is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
      testRunner.And("the token has a valid length of 30 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
      testRunner.And(string.Format("the token has the \"{0}\" as a claim", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="User wants to authenticate with invalid email")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication/UserAuthentication")]
        [Xunit.TraitAttribute("Description", "User wants to authenticate with invalid email")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        [Xunit.InlineDataAttribute("hello", new string[0])]
        [Xunit.InlineDataAttribute("123", new string[0])]
        [Xunit.InlineDataAttribute("<NULL />", new string[0])]
        [Xunit.InlineDataAttribute("<EMPTY />", new string[0])]
        [Xunit.InlineDataAttribute("email@com", new string[0])]
        [Xunit.InlineDataAttribute("email@.com", new string[0])]
        [Xunit.InlineDataAttribute("@server.com", new string[0])]
        public void UserWantsToAuthenticateWithInvalidEmail(string invalidEmail, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BusinessRuleError"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("invalidEmail", invalidEmail);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to authenticate with invalid email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
   this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table3.AddRow(new string[] {
                            "<userEmail>",
                            "ValidPassword1"});
#line 32
      testRunner.Given("that the user with the following information wants to sign in", ((string)(null)), table3, "Given ");
#line hidden
#line 35
      testRunner.When("the create token request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
      testRunner.Then("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail"});
                table4.AddRow(new string[] {
                            "InvalidEmail",
                            "Invalid email",
                            "The email entered for the new user is invalid."});
#line 37
      testRunner.And("the following problem detail is returned", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User wants to authenticate with non existing email")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication/UserAuthentication")]
        [Xunit.TraitAttribute("Description", "User wants to authenticate with non existing email")]
        [Xunit.TraitAttribute("Category", "UserError")]
        public void UserWantsToAuthenticateWithNonExistingEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "UserError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to authenticate with non existing email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
   this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table5.AddRow(new string[] {
                            "nonexistinguser@email.com",
                            "ValidPassword1"});
#line 53
      testRunner.Given("that the user with the following information wants to sign in", ((string)(null)), table5, "Given ");
#line hidden
#line 56
      testRunner.When("the create token request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
      testRunner.Then("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail"});
                table6.AddRow(new string[] {
                            "WrongUserInformation",
                            "Faulty user information",
                            "The user information entered is invalid."});
#line 58
      testRunner.And("the following problem detail is returned", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User wants to authenticate with the wrong password")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication/UserAuthentication")]
        [Xunit.TraitAttribute("Description", "User wants to authenticate with the wrong password")]
        [Xunit.TraitAttribute("Category", "UserError")]
        public void UserWantsToAuthenticateWithTheWrongPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "UserError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to authenticate with the wrong password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
   this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table7.AddRow(new string[] {
                            "user@email.com",
                            "WrongPassword1"});
#line 64
      testRunner.Given("that the user with the following information wants to sign in", ((string)(null)), table7, "Given ");
#line hidden
#line 67
      testRunner.When("the create token request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
      testRunner.Then("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail"});
                table8.AddRow(new string[] {
                            "WrongUserInformation",
                            "Faulty user information",
                            "The user information entered is invalid."});
#line 69
      testRunner.And("the following problem detail is returned", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthenticationUserAuthenticationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthenticationUserAuthenticationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

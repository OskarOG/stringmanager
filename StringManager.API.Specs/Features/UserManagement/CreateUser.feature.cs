// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StringManager.API.Specs.Features.UserManagement
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserManagementCreateUserFeature : object, Xunit.IClassFixture<UserManagementCreateUserFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateUser.feature"
#line hidden
        
        public UserManagementCreateUserFeature(UserManagementCreateUserFeature.FixtureData fixtureData, StringManager_API_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UserManagement", "UserManagement/CreateUser", "Note: Improve the SuperUser handling\nMaybe it could be divided up into a role or " +
                    "tag functionallity where the first user created is an Administrator\nAfter that i" +
                    "t is possible to select the role for the user\n- Administrator\n- UserAdmin\n- Fold" +
                    "erAdmin\n- User", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
   #line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Email",
                        "UserRole",
                        "Password"});
            table39.AddRow(new string[] {
                        "616aba5c-e933-4b22-a383-93aea94379b4",
                        "adminuser@email.com",
                        "Administrator",
                        "Password1"});
            table39.AddRow(new string[] {
                        "c0a1b5bd-d48d-44c3-bf25-0500ebbd239d",
                        "useradmin@email.com",
                        "UserAdmin",
                        "Password2"});
            table39.AddRow(new string[] {
                        "910b77cb-ee2a-4673-bc34-78c0992b0f05",
                        "folderadmin@email.com",
                        "FolderAdmin",
                        "Password3"});
            table39.AddRow(new string[] {
                        "11a8f678-b1b4-4d95-8191-0ea27f72407e",
                        "user@email.com",
                        "User",
                        "Password4"});
#line 11
      testRunner.Given("that the following users exists", ((string)(null)), table39, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "RoleType"});
            table40.AddRow(new string[] {
                        "616aba5c-e933-4b22-a383-93aea94379b4",
                        "Administrator"});
            table40.AddRow(new string[] {
                        "c0a1b5bd-d48d-44c3-bf25-0500ebbd239d",
                        "UserAdmin"});
            table40.AddRow(new string[] {
                        "910b77cb-ee2a-4673-bc34-78c0992b0f05",
                        "FolderAdmin"});
#line 17
      testRunner.And("that the users have the following roles", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessGroupId",
                        "AccessGroupName"});
            table41.AddRow(new string[] {
                        "4605a27b-6f86-47c3-ac1a-547aa1b01fe3",
                        "Marketing"});
            table41.AddRow(new string[] {
                        "ec77e8bf-f31b-411b-8942-6cfcce1266e7",
                        "Sales"});
#line 22
      testRunner.And("that the following access groups exists", ((string)(null)), table41, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="User with user management role or administrator creates new standard user")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "User with user management role or administrator creates new standard user")]
        [Xunit.TraitAttribute("Category", "ResourceCreation")]
        [Xunit.InlineDataAttribute("616aba5c-e933-4b22-a383-93aea94379b4", new string[0])]
        [Xunit.InlineDataAttribute("c0a1b5bd-d48d-44c3-bf25-0500ebbd239d", new string[0])]
        public void UserWithUserManagementRoleOrAdministratorCreatesNewStandardUser(string userId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ResourceCreation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userId", userId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User with user management role or administrator creates new standard user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 29
      testRunner.Given(string.Format("that the user \"{0}\" is signed in", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table42.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "User"});
#line 30
      testRunner.And("want to create a new user with the following information", ((string)(null)), table42, "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table43.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table43.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 33
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table43, "And ");
#line hidden
#line 37
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
      testRunner.Then("the new user is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
      testRunner.And("the new users id is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
      testRunner.And("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administrator tries to create new user with Administrator role")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create new user with Administrator role")]
        [Xunit.TraitAttribute("Category", "ResourceCreation")]
        public void AdministratorTriesToCreateNewUserWithAdministratorRole()
        {
            string[] tagsOfScenario = new string[] {
                    "ResourceCreation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create new user with Administrator role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 50
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table44.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "Administrator"});
#line 51
      testRunner.And("want to create a new user with the following information", ((string)(null)), table44, "And ");
#line hidden
#line 54
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
      testRunner.Then("the new user is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
      testRunner.And("the new users id is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
      testRunner.And("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administrator tries to create new user with UserAdmin role")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create new user with UserAdmin role")]
        [Xunit.TraitAttribute("Category", "ResourceCreation")]
        public void AdministratorTriesToCreateNewUserWithUserAdminRole()
        {
            string[] tagsOfScenario = new string[] {
                    "ResourceCreation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create new user with UserAdmin role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 61
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table45.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "UserAdmin"});
#line 62
      testRunner.And("want to create a new user with the following information", ((string)(null)), table45, "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table46.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table46.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 65
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table46, "And ");
#line hidden
#line 69
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
      testRunner.Then("the new user is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
      testRunner.And("the new users id is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
      testRunner.And("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User admin tries to create new user with UserAdmin role")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "User admin tries to create new user with UserAdmin role")]
        [Xunit.TraitAttribute("Category", "ResourceCreation")]
        public void UserAdminTriesToCreateNewUserWithUserAdminRole()
        {
            string[] tagsOfScenario = new string[] {
                    "ResourceCreation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User admin tries to create new user with UserAdmin role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 76
      testRunner.Given("that the user \"c0a1b5bd-d48d-44c3-bf25-0500ebbd239d\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table47.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "UserAdmin"});
#line 77
      testRunner.And("want to create a new user with the following information", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table48.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table48.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 80
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table48, "And ");
#line hidden
#line 84
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
      testRunner.Then("the new user is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
      testRunner.And("the new users id is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
      testRunner.And("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User admin tries to create new user with FolderAdmin role")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "User admin tries to create new user with FolderAdmin role")]
        [Xunit.TraitAttribute("Category", "ResourceCreation")]
        public void UserAdminTriesToCreateNewUserWithFolderAdminRole()
        {
            string[] tagsOfScenario = new string[] {
                    "ResourceCreation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User admin tries to create new user with FolderAdmin role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 91
      testRunner.Given("that the user \"c0a1b5bd-d48d-44c3-bf25-0500ebbd239d\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table49.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "FolderAdmin"});
#line 92
      testRunner.And("want to create a new user with the following information", ((string)(null)), table49, "And ");
#line hidden
#line 95
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
      testRunner.Then("the new user is created with the expected information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
      testRunner.And("the new users id is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
      testRunner.And("the http status code \"201 Created\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User admin tries to create new administrator")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "User admin tries to create new administrator")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        public void UserAdminTriesToCreateNewAdministrator()
        {
            string[] tagsOfScenario = new string[] {
                    "BusinessRuleError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User admin tries to create new administrator", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 102
      testRunner.Given("that the user \"c0a1b5bd-d48d-44c3-bf25-0500ebbd239d\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table50.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "Administrator"});
#line 103
      testRunner.And("want to create a new user with the following information", ((string)(null)), table50, "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table51.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table51.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 106
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table51, "And ");
#line hidden
#line 110
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table52.AddRow(new string[] {
                            "UnauthorizedRoleAssignment",
                            "Insufficient permissions",
                            "You can not create a new user with the role that you selected.",
                            "400"});
#line 113
      testRunner.And("the following problem detail is returned", ((string)(null)), table52, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Folder admin tries to create new user")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Folder admin tries to create new user")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        public void FolderAdminTriesToCreateNewUser()
        {
            string[] tagsOfScenario = new string[] {
                    "BusinessRuleError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Folder admin tries to create new user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 119
      testRunner.Given("that the user \"910b77cb-ee2a-4673-bc34-78c0992b0f05\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table53.AddRow(new string[] {
                            "testuser@email.com",
                            "abc123",
                            "User"});
#line 120
      testRunner.And("want to create a new user with the following information", ((string)(null)), table53, "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table54.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table54.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 123
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table54, "And ");
#line hidden
#line 127
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table55.AddRow(new string[] {
                            "InsufficientPermissions",
                            "Insufficient permissions",
                            "You can not create a new user.",
                            "400"});
#line 130
      testRunner.And("the following problem detail is returned", ((string)(null)), table55, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administrator tries to create a new user with an email that is already registered" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create a new user with an email that is already registered" +
            "")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        public void AdministratorTriesToCreateANewUserWithAnEmailThatIsAlreadyRegistered()
        {
            string[] tagsOfScenario = new string[] {
                    "BusinessRuleError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create a new user with an email that is already registered" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 136
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table56.AddRow(new string[] {
                            "folderadmin@email.com",
                            "abc123",
                            "User"});
#line 137
      testRunner.And("want to create a new user with the following information", ((string)(null)), table56, "And ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table57.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table57.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 140
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table57, "And ");
#line hidden
#line 144
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table58.AddRow(new string[] {
                            "ExistingEmail",
                            "Existing email",
                            "The email entered for the new user is already registered.",
                            "400"});
#line 147
      testRunner.And("the following problem detail is returned", ((string)(null)), table58, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Administrator tries to create a new user with an invalid email")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create a new user with an invalid email")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        [Xunit.InlineDataAttribute("hello", new string[0])]
        [Xunit.InlineDataAttribute("123", new string[0])]
        [Xunit.InlineDataAttribute("<NULL />", new string[0])]
        [Xunit.InlineDataAttribute("<EMPTY />", new string[0])]
        [Xunit.InlineDataAttribute("email@com", new string[0])]
        [Xunit.InlineDataAttribute("email@.com", new string[0])]
        [Xunit.InlineDataAttribute("@server.com", new string[0])]
        public void AdministratorTriesToCreateANewUserWithAnInvalidEmail(string invalidEmail, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BusinessRuleError"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("invalidEmail", invalidEmail);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create a new user with an invalid email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 153
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table59.AddRow(new string[] {
                            string.Format("{0}", invalidEmail),
                            "abc123",
                            "User"});
#line 154
      testRunner.And("want to create a new user with the following information", ((string)(null)), table59, "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table60.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table60.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 157
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table60, "And ");
#line hidden
#line 161
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table61.AddRow(new string[] {
                            "InvalidEmail",
                            "Invalid email",
                            "The email entered for the new user is invalid.",
                            "400"});
#line 164
      testRunner.And("the following problem detail is returned", ((string)(null)), table61, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Administrator tries to create a new user with invalid password")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create a new user with invalid password")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        [Xunit.InlineDataAttribute("hello", new string[0])]
        [Xunit.InlineDataAttribute("123", new string[0])]
        [Xunit.InlineDataAttribute("<NULL />", new string[0])]
        [Xunit.InlineDataAttribute("<EMPTY />", new string[0])]
        [Xunit.InlineDataAttribute("qwerty1", new string[0])]
        [Xunit.InlineDataAttribute("qwerty123!", new string[0])]
        [Xunit.InlineDataAttribute("Qwerty123", new string[0])]
        public void AdministratorTriesToCreateANewUserWithInvalidPassword(string invalidPassword, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BusinessRuleError"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("invalidPassword", invalidPassword);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create a new user with invalid password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 180
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table62.AddRow(new string[] {
                            "test@email.com",
                            string.Format("{0}", invalidPassword),
                            "User"});
#line 181
      testRunner.And("want to create a new user with the following information", ((string)(null)), table62, "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table63.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table63.AddRow(new string[] {
                            "ec77e8bf-f31b-411b-8942-6cfcce1266e7"});
#line 184
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table63, "And ");
#line hidden
#line 188
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table64.AddRow(new string[] {
                            "InvalidPassword",
                            "Invalid password",
                            "The password entered for the new user is invalid.",
                            "400"});
#line 191
      testRunner.And("the following problem detail is returned", ((string)(null)), table64, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administrator tries to create a new user with initial access group that does not " +
            "exist")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "Administrator tries to create a new user with initial access group that does not " +
            "exist")]
        [Xunit.TraitAttribute("Category", "BusinessRuleError")]
        public void AdministratorTriesToCreateANewUserWithInitialAccessGroupThatDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "BusinessRuleError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administrator tries to create a new user with initial access group that does not " +
                    "exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 207
      testRunner.Given("that the user \"616aba5c-e933-4b22-a383-93aea94379b4\" is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table65.AddRow(new string[] {
                            "test@email.com",
                            "<invalidPassword>",
                            "User"});
#line 208
      testRunner.And("want to create a new user with the following information", ((string)(null)), table65, "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table66.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table66.AddRow(new string[] {
                            "8c9e47e5-b2ec-4818-8fe8-35241e3d26fb"});
#line 211
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table66, "And ");
#line hidden
#line 215
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
      testRunner.And("the http status code \"400 Bad Request\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table67.AddRow(new string[] {
                            "InvalidAccessGroup",
                            "Invalid access group",
                            "One of the initial access groups added to the user does not exist.",
                            "400"});
#line 218
      testRunner.And("the following problem detail is returned", ((string)(null)), table67, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User that is not signed in tries to create a new user")]
        [Xunit.TraitAttribute("FeatureTitle", "UserManagement/CreateUser")]
        [Xunit.TraitAttribute("Description", "User that is not signed in tries to create a new user")]
        [Xunit.TraitAttribute("Category", "AuthenticationError")]
        public void UserThatIsNotSignedInTriesToCreateANewUser()
        {
            string[] tagsOfScenario = new string[] {
                    "AuthenticationError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User that is not signed in tries to create a new user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 223
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
   this.FeatureBackground();
#line hidden
#line 224
      testRunner.Given("that no user is signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "RoleType"});
                table68.AddRow(new string[] {
                            "test@email.com",
                            "<invalidPassword>",
                            "User"});
#line 225
      testRunner.And("want to create a new user with the following information", ((string)(null)), table68, "And ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccessGroupId"});
                table69.AddRow(new string[] {
                            "4605a27b-6f86-47c3-ac1a-547aa1b01fe3"});
                table69.AddRow(new string[] {
                            "8c9e47e5-b2ec-4818-8fe8-35241e3d26fb"});
#line 228
      testRunner.And("that the new user should be included in the following access groups", ((string)(null)), table69, "And ");
#line hidden
#line 232
      testRunner.When("the new user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 233
      testRunner.Then("a new user is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 234
      testRunner.And("the http status code \"401 Unauthorized\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProblemType",
                            "Title",
                            "Detail",
                            "HttpStatus"});
                table70.AddRow(new string[] {
                            "UnauthorizedAction",
                            "Not authorized",
                            "You are not authorized to perform this action.",
                            "401"});
#line 235
      testRunner.And("the following problem detail is returned", ((string)(null)), table70, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UserManagementCreateUserFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UserManagementCreateUserFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
